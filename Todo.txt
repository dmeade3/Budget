Program:
    [ ] use transaction.writeouteTransaction method everywhere
    [ ] make a function to get the current tab index and use instead of the #'s for realoading / just store when the tab index changes in the MainProgramData
    [ ] inside the login pane
        -handle right pass
        -wrong pass
            -ask again for the password for 3 times then exit like cancel, oportunity to try again after trying to change user again
        -cancel
            -should not load new user or change the user in combo box
    [ ] replace all system.out with logger statements
    [ ] when reading in transactions, dont read in the mystery line
        -must be same date, same amount, same check number to discard
        -transaction should not hae fields that are like this / un-needed
    [ ] Category drop down should have user made categories and the enum categories
    [ ] make in main program data a list of account that are selected on the tree, will be destroyed and filled after every account tree change
    [ ] when reloading anything, keep the CURRENT_USER the same
    [ ] when opening a data csv file if it doesnt exist then create a new one
        -maybe create all new csv files on user creation, include the headers

    -be able to delete transaction from transaction tab
        -have a delete button right next to the save
            -delete should bring up a separate gui ask are you sure?

    -when transactions read in they need to have info added to them
        -category empty unless previous mapping exists

    -budget tab a budget for the whole account
        -within a time range in the bottom panel  1 week / 1 month / 2 / 3 / 6
            -make those time ranges an enum that hold a day count

    -input rules on all text fields / try catches and error messages
        -this really means test stupid inputs and make sure the program doesnt let it go through / breaks
    -make user password protected as an option
        -make users read into an array or user objects and mapped to a password / if pass blank then no password
        -encrypt the passwords
            -this is going to be its own thing here
            -encrypt decrypt package

    -the right side should be a summary of what is in the middle if the gui / unless i just want to have it all in the summary tab
    -make header in transactions the table header and not just a line
    -on close before calling reload should save off any visual settings so you don't have to re-click settings
    -test with completely blank user and make sure doesnt fail

    -be able to add budget sections
    -be able to add transactions
    -be able to add accounts


    Hierarchy of objects:
        Budget Program:
            Gui:
                Bottom:
                    -changing of tabs should trigger this panel to change
                        -might have different types of filters for different tabs

                Center:
                    -is tabbed:

                        Summary Tab:
                            -graphs as part of it, should also have a pane of non labeled data
                            -give breakdown of where money is being spent as well
                                -pie graph of accounts

            User:
                -user has associated mapping of vendors to categories

                Budget: will have to make this object and store it in the mainprogramdata
                    -list of budget sections
                    -total budgeted
                    -only need a getter because it should be calculated for each call
                    -total spent

                Account:
                    -balance

                TransactionParser:
                    -parser interface that all parsers have to implement

                    Switch statement to what kind of data it is:
                        csv:

                        other...:
                            -find these file formats

    -known vendors list
        -mapped to a specific category to help along with the category matching
        -learns over time as you setr more rules
        -is saved and read in each time
            -EX   Walmart:->:groceries
                :->: as the mapping symbol

    -store balance info
        -admin section to set current balance when first setting up program

    Junit tests for behavior that wont change like th logic:
        [ ] Data
        [ ] Gui
        [ ] Security
        [ ] User
        [ ] Util

    Functionality:
        -eventually start making junit test cases for this stuff
        -take transactions from mint
        -will need to format read in transactions
        -investment tracking
        -should say when account was last updated in summary tab
            -will need to add this to the account csv
            -make file find and replace util
                -make very general csv find and replace for whole rows / individual items
        -help predict future financial status
        -when account clicked on it should update the middle scrollpane with that account info
        -bottom section should be able to switch the view between a 1 week / 1 month / 2 / 3 / 6 / year / all
            -combo box
            -maybe enum if it makes sense
            -converting function that should
            -be for tabs budget, summary
                -future should have a separate time picker for date intervals into the future
                -summary should default be 1 week back

        -eventually take out all the creation dates
            -if ever going public with this will need to wipe all date info on it
            -github has the dates too
                -would need to delete the repo and remake it with files with fresh dates

    References:
        css:
            http://www.guigarage.com/2013/09/lets-get-wet/
            https://examples.javacodegeeks.com/desktop-java/javafx/javafx-css-tutorial/
            https://docs.oracle.com/javafx/2/api/javafx/scene/doc-files/cssref.html#region